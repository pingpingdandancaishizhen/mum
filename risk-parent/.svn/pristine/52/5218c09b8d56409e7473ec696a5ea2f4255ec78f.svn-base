package cn.sunfit.risk.buz.server.service.p2p.order;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.ibatis.session.RowBounds;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.Assert;

import orj.worf.mybatis.util.CountHelper;
import cn.sunfit.risk.buz.api.beans.system.DataDic;
import cn.sunfit.risk.buz.api.constants.LoanHandleType;
import cn.sunfit.risk.buz.api.constants.order.LoanRepaymentType;
import cn.sunfit.risk.buz.api.constants.order.OrderStatus;
import cn.sunfit.risk.buz.api.exception.ServiceException;
import cn.sunfit.risk.buz.api.service.p2p.activiti.SuperFormService;
import cn.sunfit.risk.buz.api.service.p2p.order.OrderService;
import cn.sunfit.risk.buz.api.vo.RespPage;
import cn.sunfit.risk.buz.api.vo.corp.CorpUserDTO;
import cn.sunfit.risk.buz.api.vo.p2p.activiti.FormQuery;
import cn.sunfit.risk.buz.api.vo.p2p.excel.LoanInfoQueryReq;
import cn.sunfit.risk.buz.api.vo.p2p.order.OrderListBean;
import cn.sunfit.risk.buz.server.dao.p2p.order.LoanInfoDAO;
import cn.sunfit.risk.buz.server.dao.system.DataDicDAO;

@Service("risk.p2p.orderService")
public class OrderServiceImpl implements OrderService {

    @Autowired
    private LoanInfoDAO loanInfoDAO;

    @Autowired
    private DataDicDAO dataDicDAO;

    private Map<String, List<DataDic>> dicMap;
    @Autowired
    private SuperFormService superFormService;

    @Override
    public void batchSubmit(CorpUserDTO currentUser, Long[] ids) throws ServiceException {
        // 查询FORMREQ
        Assert.noNullElements(ids);
        // 验证是否都是新增状态活着退回状态
        String[] status = new String[] { OrderStatus.ADD.getStatus(), OrderStatus.BACK.getStatus() };
        long count = loanInfoDAO.countLoanInfoStatus(currentUser.getDomain(), ids, status);
        if (count != ids.length) {
            throw new ServiceException("数据异常");
        }
        List<FormQuery> querys = loanInfoDAO.selectFormQuery(currentUser.getDomain(), ids);
        for (FormQuery f : querys) {
            f.setCorpInfo(currentUser);
        }
        // 提交流程 TODO
    }

    private void orderListBeanFill(OrderListBean bean, LoanInfoQueryReq req) {
        bean.setAproveStatusStr(OrderStatus.getLabelByStatus(bean.getAproveStatus()));
        bean.setLoanHandleType(LoanHandleType.getLabelByStatus(bean.getLoanHandleType()));
        LoanRepaymentType repayType = LoanRepaymentType.getTypeNameByTypeId(bean.getRepayType());
        if (repayType != null) {
            bean.setRepayType(repayType.getTypeName());
        }
        bean.setGender(valueFill(req.getCorpId(), req.getDomain(), bean.getProductCode(), "cust_gender",
                bean.getGender()));
        bean.setCustomerType(valueFill(req.getCorpId(), req.getDomain(), bean.getProductCode(), "cust_type",
                bean.getCustomerType()));
        bean.setRepayType(valueFill(req.getCorpId(), req.getDomain(), bean.getProductCode(),
                "loan_apply_repaymentTypes", bean.getRepayType()));
    }

    @Override
    public List<OrderListBean> queryCustAllLoanInfo(LoanInfoQueryReq req) {
        List<OrderListBean> list = loanInfoDAO.queryCustAllLoanInfo(req);
        for (OrderListBean imp : list) {
            orderListBeanFill(imp, req);
        }
        return list;
    }

    @Override
    public RespPage<List<OrderListBean>> queryLoanInfoList(LoanInfoQueryReq req) {
        List<OrderListBean> list = loanInfoDAO.queryLoanInfoList(req, new RowBounds(req.getOffset(), req.getLimit()));
        for (OrderListBean imp : list) {
            imp.setPlusIdIcon("need");
            orderListBeanFill(imp, req);
        }
        final int totalCount = CountHelper.getTotalRow();
        return new RespPage<List<OrderListBean>>(list, totalCount);
    }

    private String valueFill(String corpId, String domain, String productCode, String field, String key) {
        String result = key;
        if (dicMap == null) {
            dicMap = new HashMap<String, List<DataDic>>();
        }
        String provider = dataDicDAO.getFieldProvider(domain, field, productCode);
        if (StringUtils.isNotBlank(provider)) {
            if (!dicMap.containsKey(provider)) {
                dicMap.put(provider, dataDicDAO.getDIcByField(corpId, productCode, provider));
            }
            List<DataDic> dicList = dicMap.get(provider);
            if (!dicList.isEmpty()) {
                for (DataDic dic : dicList) {
                    if (StringUtils.isNotBlank(key) && key.equals(dic.getDicKey())) {
                        result = dic.getDicValue();
                        break;
                    }
                }
            }
        }
        return result;
    }
}
