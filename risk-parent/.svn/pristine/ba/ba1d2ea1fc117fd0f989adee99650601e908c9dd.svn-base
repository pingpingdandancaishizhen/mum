package cn.sunfit.risk.buz.server.service.corp;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.session.RowBounds;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import orj.worf.mybatis.util.CountHelper;
import cn.sunfit.risk.buz.api.beans.corp.CorpUser;
import cn.sunfit.risk.buz.api.beans.corp.CustContact;
import cn.sunfit.risk.buz.api.beans.corp.CustOperLog;
import cn.sunfit.risk.buz.api.beans.corp.Customer;
import cn.sunfit.risk.buz.api.constants.customer.CustomerStatus;
import cn.sunfit.risk.buz.api.constants.customer.CustomerType;
import cn.sunfit.risk.buz.api.constants.customer.GenderType;
import cn.sunfit.risk.buz.api.constants.customer.MaritalStatus;
import cn.sunfit.risk.buz.api.service.corp.CustomerService;
import cn.sunfit.risk.buz.api.utils.IdUtil;
import cn.sunfit.risk.buz.api.vo.RespPage;
import cn.sunfit.risk.buz.api.vo.corp.CorpDataRoleDTO;
import cn.sunfit.risk.buz.api.vo.corp.CustomerAddDTO;
import cn.sunfit.risk.buz.api.vo.corp.CustomerDTO;
import cn.sunfit.risk.buz.api.vo.corp.CustomerModifyDTO;
import cn.sunfit.risk.buz.api.vo.corp.CustomerQueryReq;
import cn.sunfit.risk.buz.server.dao.corp.CorpDataRoleDAO;
import cn.sunfit.risk.buz.server.dao.corp.CorpUserDAO;
import cn.sunfit.risk.buz.server.dao.corp.CustContactDAO;
import cn.sunfit.risk.buz.server.dao.corp.CustOperLogDAO;
import cn.sunfit.risk.buz.server.dao.corp.CustomerDAO;

@Service("risk.customerService")
public class CustomerServiceImpl implements CustomerService {

    @Autowired
    CustomerDAO customerDAO;

    @Autowired
    CustContactDAO custContactDAO;

    @Autowired
    CustOperLogDAO custOperLogDAO;

    @Autowired
    CorpDataRoleDAO corpDataRoleDAO;

    @Autowired
    private CorpUserDAO corpUserDAO;

    @Override
    public boolean checkCustomerExist(String id, String uid, String licenseNum, String domain) {
        return customerDAO.selectByLicenseNum(id, uid, licenseNum, domain) == null;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void deleteCustomer(String domain, String id, String uid) {
        Customer customer = customerDAO.selectByPrimaryKey(id, domain);
        customerDAO.deleteCustomer(domain, id);
        CustOperLog record = CustOperLog.createCustOperLog(uid, id, CustOperLog.DELETE_CUSTOMER,
                "删除了客户[" + customer.getName() + "]");
        custOperLogDAO.insert(record);
    }

    private List<String> getDataRole(String userId, String corpId) {
        List<String> result = new ArrayList<String>();
        // 有权限的用户Id
        Set<String> userIdList = new HashSet<String>();
        // 有权限的部门Id
        List<String> deptList = new ArrayList<String>();

        // 用户数据权限角色集合
        List<CorpDataRoleDTO> dataRoleList = corpDataRoleDAO.selectUserCorpDataRole(userId, corpId);
        for (CorpDataRoleDTO corpDataRoleDTO : dataRoleList) {
            List<String> depts = Arrays.asList(corpDataRoleDTO.getDepts().split(","));
            deptList.addAll(depts);
            // 若仅本人
            if (StringUtils.equals(corpDataRoleDTO.getSelfOnly(), "1")) {
                userIdList.add(userId);
            }
            // 若仅本部门
            if (StringUtils.equals(corpDataRoleDTO.getDeptOnly(), "1")) {
                CorpUser createUser = corpUserDAO.selectByPrimaryKey(userId);
                deptList.add(createUser.getDeptId());
            }
        }
        List<String> temp = corpUserDAO.selectUserByDeptId(deptList);
        userIdList.addAll(temp);
        for (String id : userIdList) {
            result.add(id);
        }
        return result;
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void insert(CustomerAddDTO customer, List<CustContact> custContacts, String domain) {
        customer.setId(IdUtil.geneId());
        customer.setCreateTime(new Date());
        customer.setUpdateTime(new Date());
        customer.setStatus(CustomerStatus.CREATE.getStatus());
        customerDAO.insert(customer);
        for (CustContact custContact : custContacts) {
            custContact.setId(IdUtil.geneId());
            custContact.setCustId(customer.getId());
        }
        custContactDAO.insert(custContacts, domain);
        CustOperLog record = CustOperLog.createCustOperLog(customer.getUid(), customer.getId(),
                CustOperLog.ADD_CUSTOMER, "创建了客户[" + customer.getName() + "]");
        custOperLogDAO.insert(record);
    }

    @Override
    public RespPage<List<CustomerDTO>> queryAllCustomer(CustomerQueryReq req) {
        req.setUids(getDataRole(req.getUid(), req.getCorpId()));
        req.setStatus(CustomerStatus.CREATE.getStatus());
        List<CustomerDTO> list = customerDAO.queryAllCustomer(req, new RowBounds(req.getOffset(), req.getLimit()));
        int totalCount = CountHelper.getTotalRow();
        for (CustomerDTO customerDTO : list) {
            CustomerType customerType = CustomerType.getTypeNameByTypeId(customerDTO.getType());
            if (customerType != null) {
                customerDTO.setTypeName(customerType.getTypeName());
            }
            CustomerStatus customerStatus = CustomerStatus.getNameByStatus(customerDTO.getStatus());
            if (customerStatus != null) {
                customerDTO.setStatusName(customerStatus.getStatusName());
            }
            MaritalStatus maritalStatus = MaritalStatus.getNameByType(customerDTO.getMaritalStatus());
            if (maritalStatus != null) {
                customerDTO.setMaritalStatusName(maritalStatus.getName());
            }
            GenderType genderType = GenderType.getNameByStatus(customerDTO.getGender());
            if (genderType != null) {
                customerDTO.setGenderName(genderType.getName());
            }
        }
        return new RespPage<List<CustomerDTO>>(list, totalCount);
    }

    @Override
    public RespPage<List<CustomerDTO>> queryBlackList(CustomerQueryReq req) {
        List<CustomerDTO> list = customerDAO.queryBlackList(req, new RowBounds(req.getOffset(), req.getLimit()));
        int totalCount = CountHelper.getTotalRow();
        for (CustomerDTO customerDTO : list) {
            CustomerType customerType = CustomerType.getTypeNameByTypeId(customerDTO.getType());
            if (customerType != null) {
                customerDTO.setTypeName(customerType.getTypeName());
            }
            CustomerStatus customerStatus = CustomerStatus.getNameByStatus(customerDTO.getStatus());
            if (customerStatus != null) {
                customerDTO.setStatusName(customerStatus.getStatusName());
            }
            MaritalStatus maritalStatus = MaritalStatus.getNameByType(customerDTO.getMaritalStatus());
            if (maritalStatus != null) {
                customerDTO.setMaritalStatusName(maritalStatus.getName());
            }
            GenderType genderType = GenderType.getNameByStatus(customerDTO.getGender());
            if (genderType != null) {
                customerDTO.setGenderName(genderType.getName());
            }
        }
        return new RespPage<List<CustomerDTO>>(list, totalCount);
    }

    @Override
    public RespPage<List<CustomerDTO>> queryCustomerList(CustomerQueryReq req) {
        List<CustomerDTO> list = customerDAO.queryCustomerList(req, new RowBounds(req.getOffset(), req.getLimit()));
        int totalCount = CountHelper.getTotalRow();
        for (CustomerDTO customerDTO : list) {
            CustomerType customerType = CustomerType.getTypeNameByTypeId(customerDTO.getType());
            if (customerType != null) {
                customerDTO.setTypeName(customerType.getTypeName());
            }
            CustomerStatus customerStatus = CustomerStatus.getNameByStatus(customerDTO.getStatus());
            if (customerStatus != null) {
                customerDTO.setStatusName(customerStatus.getStatusName());
            }
            MaritalStatus maritalStatus = MaritalStatus.getNameByType(customerDTO.getMaritalStatus());
            if (maritalStatus != null) {
                customerDTO.setMaritalStatusName(maritalStatus.getName());
            }
            GenderType genderType = GenderType.getNameByStatus(customerDTO.getGender());
            if (genderType != null) {
                customerDTO.setGenderName(genderType.getName());
            }
        }
        return new RespPage<List<CustomerDTO>>(list, totalCount);
    }

    @Override
    public Customer selectByPrimaryKey(String id, String domain) {
        return customerDAO.selectByPrimaryKey(id, domain);
    }

    @Override
    public Customer selectByPrimaryLicenseNum(String licenseNum, String domain) {
        return customerDAO.selectByPrimaryLicenseNum(licenseNum, domain);
    }

    @Override
    public List<CustContact> selectCustContactsByCustId(String custId, String domain) {
        return custContactDAO.selectCustContactsByCustId(custId, domain);
    }

    @Override
    @Transactional(rollbackFor = Exception.class)
    public void update(CustomerModifyDTO customer, List<CustContact> custContacts, String domain) {
        Customer old = customerDAO.selectByPrimaryKey(customer.getId(), customer.getDomain());
        customer.setUpdateTime(new Date());
        customerDAO.update(customer);
        custContactDAO.deleteCustContactsByCustId(customer.getId(), customer.getDomain());
        for (CustContact custContact : custContacts) {
            custContact.setId(IdUtil.geneId());
            custContact.setCustId(customer.getId());
        }
        custContactDAO.insert(custContacts, domain);
        CustOperLog record = CustOperLog.createCustOperLog(customer.getUid(), customer.getId(),
                CustOperLog.MODIFY_CUSTOMER, "修改了客户[" + old.getName() + "]" + customer.compareOldCustomer(old));
        custOperLogDAO.insert(record);
    }

}
