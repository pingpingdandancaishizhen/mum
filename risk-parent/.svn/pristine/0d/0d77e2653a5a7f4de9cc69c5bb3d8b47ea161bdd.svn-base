<template>
  <div class="col-md-12 btn-center">
    <button class="btn btn-primary  btn-submit" data-loading-text="保存..." id="saveDraft"
            @click="handleClick">保存
    </button>
    <button class="btn btn-primary btn-submit" data-loading-text="提交..." id="submit"
            @click="handleClick">提交
    </button>
  </div>
</template>
<style>
  .btn-center {
    vertical-align: middle;
    text-align: center;
    margin: 40px 0;
  }

  .btn-center .btn {
    margin-left: 20px;
  }

  .btn-submit {
    padding-left: 50px;
    padding-right: 50px;
  }
</style>
<script>
  import {mapGetters} from 'vuex'
  import * as api from '../api'
  export default{
    data(){
      return {
        apiUrl: {
          saveDraft: '/loan/saveDraft',
          submit: '/loan/submit'
        }
      }
    },
    computed: {
      ...mapGetters({
        'hiddenData': 'defaultHiddenData',
        'rulesData': 'rulesData'
      })
    },
    methods: {
      handleClick: function (e) {
        var target = e.target;
        var $el = $(target);
        var operation = $el.attr('id');
        var btnTxt=$el.text();
        $el.button('loading');
        var hiddenData = this.hiddenData;
        var submitData = this.$store.state.submitData;
        var params = {}
        $.extend(params, hiddenData, {data: JSON.stringify(submitData)});
        var options = {
          url: this.apiUrl[operation],
          data: params,
          complete: function () {
            $el.button('reset');
          }
        };
        var canSubmit = false;
        if (operation == 'saveDraft') {
          canSubmit = true;
        } else {
          canSubmit = this.checkRules($el);
        }
        if (canSubmit) {
          api.submitFormData(options, function (data) {
            $.alert(btnTxt + '成功');
            setTimeout(function () {
              var url=tools.getCurrentIFrameUrl();
              var refreshUrl=tools.www_root()+'/index/toIndex';
              tools.closeParentTab(url,refreshUrl)
            },500)

          })
        }

      },
      checkRules: function (dom) {
//          condition是第一层判断，ruleType是第二层判断，然后才是下面的判断
        var postParams = this.$store.state.submitData;
        var rules = this.rulesData;
        var canSubmit = true;
        var message = '';//验证报错弹框信息
        let fieldDomKey = '';//具体验证错误的验证key
        var operationType=postParams.operationType;
        if(operationType==null||operationType=='undefined'||operationType==1){
          for (var key in postParams) {
            var oneFlag = false;
            var status = this.hasEmpty(rules[key],postParams);
//            console.log(key, status)
            var postValue = postParams[key];
            var rule = rules[key];
            if (status == 1) {
              //必须有值
              if (rule) {
                statValidate(rule)
              }
            }
            else if (status == 2) {
              if (postValue) { //有没有值，有值才
                if (rule) {
                  statValidate(rule)
                }
              }
            }

            if (oneFlag) {
              dom.button('reset');
//              console.info('++id',fieldDomKey)
              var fieldDomKeyDom = $('#' + fieldDomKey)[0]||$('.'+fieldDomKey)[0];
              var $fieldDomKey=$(fieldDomKeyDom);
              var focusDom = $fieldDomKey.find('input').eq(0)[0] || $fieldDomKey.find('select').eq(0)[0] || $fieldDomKey.find('textArea').eq(0)[0] || $fieldDomKey[0];
              $fieldDomKey.addClass('.has-error');
              $(focusDom).focus();
              $.alert(message);
              break;
            }
          }
          return canSubmit;
        }else{
          canSubmit=true;
          return canSubmit;
        }

        //验证函数
        function statValidate(rule) {
          for (var key1 in rule) {
            var twoFlag = false;
            var v1 = rule[key1];
            //特殊ruleType规则
            var ruleType = v1.ruleType;
            if (ruleType == 'notEmpty') {
              if (!/\S/.test(postValue)) {
                twoFlag = true;
                message = (v1.fieldName || '') + '不能为空';
                fieldDomKey = v1.parent||v1.fieldKey;
                canSubmit = false;
              }
            }
            if (tools.rules.hasOwnProperty(ruleType)) {
              var toolsRule = tools.rules[ruleType];
              if (new RegExp(toolsRule.reg).test(postValue)) {
//                    canSubmit = true;
              } else {
                canSubmit = false;
                twoFlag = true;
                message = (v1.fieldName || '') + toolsRule.message;
                fieldDomKey = v1.parent||v1.fieldKey;
              }
            }
            //具体的校验规则
            if (!twoFlag) {
              var detail = v1.detail;
              if (detail) {
                for (var dKey in detail) {
                  var dValue = detail[dKey];
                  //数字判断
                  if (ruleType=='integer'||ruleType=='decimal') {
                    dValue=parseFloat(dValue);
                    //最小值
                    if (dKey == 'min') {
                      if (postValue < dValue) {
                        twoFlag = true;
                        message = (v1.fieldName || '') + v1.message;
                        fieldDomKey = v1.parent||v1.fieldKey;
                        canSubmit = false;
                        break;
                      }
                    }
                    //最大值
                    if (dKey == 'max') {
                      if (postValue > dValue) {
                        twoFlag = true;
                        message = (v1.fieldName || '') + v1.message;
                        fieldDomKey = v1.parent||v1.fieldKey;
                        canSubmit = false;
                        break;
                      }
                    }
                    //小数
                    var SValue = postValue.toString();
                    if (SValue.indexOf('.') >= 0 && dKey == 'digits') {
                      var digitsLen = SValue.length - SValue.indexOf(".")-1;
                      if (digitsLen > dValue) {
                        twoFlag = true;
                        message = (v1.fieldName || '') + v1.message;
                        fieldDomKey = v1.parent||v1.fieldKey;
                        canSubmit = false;
                        break;
                      }
                    }
                  } else {
                    //字符串
                    //长度
                    var len = postValue && postValue.toString().length;
                    //最小值
                    if (dKey == 'min') {
                      if (len < dValue) {
                        twoFlag = true;
                        message = (v1.fieldName || '') + '最小长度为' + dValue;
                        fieldDomKey = v1.parent||v1.fieldKey;
                        canSubmit = false;
                        break;
                      }
                    }
                    //最大值
                    if (dKey == 'max') {
                      if (len > dValue) {
                        twoFlag = true;
                        message = (v1.fieldName || '') + '最大长度为' + dValue;
                        fieldDomKey = v1.parent||v1.fieldKey;
                        canSubmit = false;
                        break;
                      }
                    }
                  }
                  //正则
                  if (dKey == 'regexp') {
                    if (!new RegExp(dValue).test(postValue)) {
                      twoFlag = true;
                      message = (v1.fieldName || '') + v1.message;
                      fieldDomKey = v1.parent||v1.fieldKey;
                      canSubmit = false;
                      break;
                    }
                  }
                }
              }
            }

            if (twoFlag) {
              oneFlag = true;
              break;
            }
          }
        }
      },
      hasEmpty: function (rules,postParams) {
        if (rules && rules.length > 0) {
          var has = false;
          var emptyrule;
          for (var rulekey in rules) {
            var rule = rules[rulekey];
            if (rule.ruleType == 'notEmpty') {
              has = true;
              emptyrule = rule;
              break;
            }
          }
          if (has) {
            var condition = emptyrule.condition;
            var conditionFlag;
            if (condition && condition.length > 0) {
              for (var k2 in condition) {
                var v2 = condition[k2];
                var bindingKeyValue = postParams[v2.fieldKey];
                if(bindingKeyValue){
                  var evalOperation=bindingKeyValue+v2.operator+v2.value;
                  if (eval(evalOperation)) {
                    conditionFlag = true;
                  } else {
                    conditionFlag = false;
                    break;
                  }
                }else{
                  conditionFlag=true;
                }

              }
              if (conditionFlag) {
                return 1;
              } else {
                //不符合CONDITOIN
                return 4;
              }
            } else {
              //必须验证
              return 1;
            }
          } else {
            //没有NOTEMPTY
            return 2;
          }
        } else {
          //没有rules
          return 4;
        }


        var flag = false;
        for (var k in rules) {
          var rule = rules[k];
          if (rule.ruleType == 'notEmpty') {
            flag = true;
            break;
          }
        }
        return flag;
      },
    }
  }
</script>
